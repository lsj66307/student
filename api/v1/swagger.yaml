openapi: 3.0.3
info:
  title: 学生管理系统 API
  description: 基于Go和Gin框架的学生管理系统RESTful API
  version: 1.0.0
  contact:
    name: 学生管理系统
    email: admin@example.com
servers:
  - url: http://localhost:3060
    description: 本地开发服务器
paths:
  /api/v1/students:
    get:
      summary: 获取学生列表
      description: 分页获取所有学生信息
      tags:
        - 学生管理
      parameters:
        - name: page
          in: query
          description: 页码
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: size
          in: query
          description: 每页数量
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        "200":
          description: 成功获取学生列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "获取成功"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Student"
                  total:
                    type: integer
                    example: 10
                  page:
                    type: integer
                    example: 1
                  size:
                    type: integer
                    example: 10
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: 创建学生
      description: 创建新的学生记录
      tags:
        - 学生管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStudentRequest"
      responses:
        "201":
          description: 学生创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "学生创建成功"
                  data:
                    $ref: "#/components/schemas/Student"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/students/{id}:
    get:
      summary: 获取单个学生信息
      description: 根据学生ID获取详细信息
      tags:
        - 学生管理
      parameters:
        - name: id
          in: path
          required: true
          description: 学生ID
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: 成功获取学生信息
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "获取成功"
                  data:
                    $ref: "#/components/schemas/Student"
        "404":
          description: 学生不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: 更新学生信息
      description: 根据学生ID更新学生信息
      tags:
        - 学生管理
      parameters:
        - name: id
          in: path
          required: true
          description: 学生ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStudentRequest"
      responses:
        "200":
          description: 学生信息更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "更新成功"
                  data:
                    $ref: "#/components/schemas/Student"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: 学生不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: 删除学生
      description: 根据学生ID删除学生记录
      tags:
        - 学生管理
      parameters:
        - name: id
          in: path
          required: true
          description: 学生ID
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: 学生删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "删除成功"
        "404":
          description: 学生不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/teachers:
    get:
      summary: 获取老师列表
      description: 分页获取所有老师信息
      tags:
        - 老师管理
      parameters:
        - name: page
          in: query
          description: 页码
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: size
          in: query
          description: 每页数量
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        "200":
          description: 成功获取老师列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "获取成功"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Teacher"
                  total:
                    type: integer
                    example: 10
                  page:
                    type: integer
                    example: 1
                  size:
                    type: integer
                    example: 10
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: 创建老师
      description: 创建新的老师记录
      tags:
        - 老师管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeacherRequest"
      responses:
        "201":
          description: 老师创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "老师创建成功"
                  data:
                    $ref: "#/components/schemas/Teacher"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /api/v1/teachers/{id}:
    get:
      summary: 获取老师详情
      description: 根据老师ID获取老师详细信息
      tags:
        - 老师管理
      parameters:
        - name: id
          in: path
          required: true
          description: 老师ID
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: 成功获取老师信息
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "获取成功"
                  data:
                    $ref: "#/components/schemas/Teacher"
        "404":
          description: 老师不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: 更新老师信息
      description: 根据老师ID更新老师信息
      tags:
        - 老师管理
      parameters:
        - name: id
          in: path
          required: true
          description: 老师ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeacherRequest"
      responses:
        "200":
          description: 老师信息更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "更新成功"
                  data:
                    $ref: "#/components/schemas/Teacher"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: 老师不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: 删除老师
      description: 根据老师ID删除老师记录
      tags:
        - 老师管理
      parameters:
        - name: id
          in: path
          required: true
          description: 老师ID
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: 老师删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "删除成功"
        "404":
          description: 老师不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # 认证相关API
  /api/v1/auth/login:
    post:
      tags:
        - 认证
      summary: 管理员登录
      description: 使用账号和密码进行管理员登录，返回JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/auth/profile:
    get:
      tags:
        - 认证
      summary: 获取当前管理员信息
      description: 根据JWT token获取当前登录的管理员信息
      security:
        - BearerAuth: []
      responses:
        "200":
          description: 获取管理员信息成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminInfo"
        "401":
          description: 未授权
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/auth/refresh:
    post:
      tags:
        - 认证
      summary: 刷新JWT token
      description: 使用当前有效的JWT token获取新的token
      security:
        - BearerAuth: []
      responses:
        "200":
          description: token刷新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: token不需要刷新
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 未授权
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/auth/validate:
    post:
      tags:
        - 认证
      summary: 验证JWT token
      description: 验证JWT token的有效性
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: token有效，返回管理员信息
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminInfo"
        "401":
          description: token无效
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/auth/logout:
    post:
      tags:
        - 认证
      summary: 用户登出
      description: 使当前用户的JWT token失效
      security:
        - BearerAuth: []
      responses:
        "200":
          description: 登出成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        "401":
          description: 未授权
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # 管理员管理API
  /api/v1/admins:
    get:
      tags:
        - 管理员管理
      summary: 获取管理员列表
      description: 分页获取管理员列表，支持按账号和姓名搜索
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: 页码，从1开始
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: page_size
          in: query
          required: false
          description: 每页数量，最大100
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: account
          in: query
          required: false
          description: 按账号搜索
          schema:
            type: string
            example: "admin"
        - name: name
          in: query
          required: false
          description: 按姓名搜索
          schema:
            type: string
            example: "张三"
      responses:
        "200":
          description: 成功获取管理员列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminListResponse"
        "401":
          description: 未授权
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - 管理员管理
      summary: 创建管理员
      description: 创建新的管理员账号
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAdminRequest"
      responses:
        "201":
          description: 管理员创建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminInfo"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 未授权
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: 账号已存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/admins/{id}:
    get:
      tags:
        - 管理员管理
      summary: 获取管理员详情
      description: 根据管理员ID获取管理员详细信息
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 管理员ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: 成功获取管理员详情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminInfo"
        "401":
          description: 未授权
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: 管理员不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - 管理员管理
      summary: 更新管理员信息
      description: 根据管理员ID更新管理员信息
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 管理员ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAdminRequest"
      responses:
        "200":
          description: 管理员信息更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminInfo"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 未授权
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: 管理员不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: 账号已存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - 管理员管理
      summary: 删除管理员
      description: 根据管理员ID删除管理员账号
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 管理员ID
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: 管理员删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "管理员删除成功"
        "401":
          description: 未授权
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: 禁止删除自己的账号
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: 管理员不存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /health:
    get:
      summary: 健康检查
      description: 检查服务器运行状态
      tags:
        - 系统
      responses:
        "200":
          description: 服务器运行正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "学生管理系统运行正常"
  /:
    get:
      summary: API文档首页
      description: 获取API文档和使用说明
      tags:
        - 系统
      responses:
        "200":
          description: API文档页面
          content:
            text/html:
              schema:
                type: string
components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: integer
          description: 学生ID
          example: 1
        name:
          type: string
          description: 学生姓名
          example: "张三"
        age:
          type: integer
          description: 学生年龄
          example: 20
        gender:
          type: string
          description: 学生性别
          enum: ["男", "女"]
          example: "男"
        email:
          type: string
          format: email
          description: 学生邮箱
          example: "zhangsan@example.com"
        phone:
          type: string
          description: 学生电话
          example: "13800138000"
        major:
          type: string
          description: 学生专业
          example: "计算机科学"
        grade:
          type: string
          description: 学生年级
          example: "大一"
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2025-09-12T07:20:35.890978Z"
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2025-09-12T07:20:35.890978Z"
      required:
        - id
        - name
        - age
        - gender
        - email
        - phone
        - major
        - grade
        - created_at
        - updated_at
    CreateStudentRequest:
      type: object
      properties:
        name:
          type: string
          description: 学生姓名
          example: "张三"
        age:
          type: integer
          minimum: 1
          maximum: 150
          description: 学生年龄
          example: 20
        gender:
          type: string
          enum: ["男", "女"]
          description: 学生性别
          example: "男"
        email:
          type: string
          format: email
          description: 学生邮箱
          example: "zhangsan@example.com"
        phone:
          type: string
          description: 学生电话
          example: "13800138000"
        major:
          type: string
          description: 学生专业
          example: "计算机科学"
        grade:
          type: string
          description: 学生年级
          example: "大一"
      required:
        - name
        - age
        - gender
        - email
        - phone
        - major
        - grade
    UpdateStudentRequest:
      type: object
      properties:
        name:
          type: string
          description: 学生姓名
          example: "张三"
        age:
          type: integer
          minimum: 1
          maximum: 150
          description: 学生年龄
          example: 20
        gender:
          type: string
          enum: ["男", "女"]
          description: 学生性别
          example: "男"
        email:
          type: string
          format: email
          description: 学生邮箱
          example: "zhangsan@example.com"
        phone:
          type: string
          description: 学生电话
          example: "13800138000"
        major:
          type: string
          description: 学生专业
          example: "计算机科学"
        grade:
          type: string
          description: 学生年级
          example: "大一"
    Teacher:
      type: object
      properties:
        id:
          type: integer
          description: 老师ID
          example: 1
        name:
          type: string
          description: 老师姓名
          example: "李老师"
        age:
          type: integer
          description: 老师年龄
          example: 35
        gender:
          type: string
          description: 老师性别
          enum: ["男", "女"]
          example: "女"
        email:
          type: string
          format: email
          description: 老师邮箱
          example: "li.teacher@example.com"
        phone:
          type: string
          description: 老师电话
          example: "13900139000"
        subject:
          type: string
          description: 教授科目
          example: "数学"
        title:
          type: string
          description: 职称
          example: "副教授"
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2025-09-12T07:20:35.890978Z"
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2025-09-12T07:20:35.890978Z"
      required:
        - id
        - name
        - age
        - gender
        - email
        - phone
        - subject
        - title
        - created_at
        - updated_at
    CreateTeacherRequest:
      type: object
      properties:
        name:
          type: string
          description: 老师姓名
          example: "李老师"
        age:
          type: integer
          minimum: 1
          maximum: 150
          description: 老师年龄
          example: 35
        gender:
          type: string
          enum: ["男", "女"]
          description: 老师性别
          example: "女"
        email:
          type: string
          format: email
          description: 老师邮箱
          example: "li.teacher@example.com"
        phone:
          type: string
          description: 老师电话
          example: "13900139000"
        subject:
          type: string
          description: 教授科目
          example: "数学"
        title:
          type: string
          description: 职称
          example: "副教授"
      required:
        - name
        - age
        - gender
        - email
        - phone
        - subject
        - title
    UpdateTeacherRequest:
      type: object
      properties:
        name:
          type: string
          description: 老师姓名
          example: "李老师"
        age:
          type: integer
          minimum: 1
          maximum: 150
          description: 老师年龄
          example: 35
        gender:
          type: string
          enum: ["男", "女"]
          description: 老师性别
          example: "女"
        email:
          type: string
          format: email
          description: 老师邮箱
          example: "li.teacher@example.com"
        phone:
          type: string
          description: 老师电话
          example: "13900139000"
        subject:
          type: string
          description: 教授科目
          example: "数学"
        title:
          type: string
          description: 职称
          example: "副教授"

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: 错误代码
          example: 400
        message:
          type: string
          description: 错误信息
          example: "请求参数错误"

    # 认证相关模型
    LoginRequest:
      type: object
      properties:
        account:
          type: string
          minLength: 3
          maxLength: 50
          example: "admin"
          description: "管理员账号"
        password:
          type: string
          minLength: 6
          maxLength: 100
          example: "123456"
          description: "密码"
      required:
        - account
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "JWT访问令牌"
        expires_at:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
          description: "令牌过期时间"
        admin:
          $ref: "#/components/schemas/AdminInfo"
      required:
        - token
        - expires_at
        - admin

    AdminInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: "管理员ID"
        account:
          type: string
          example: "admin"
          description: "管理员账号"
        name:
          type: string
          example: "管理员"
          description: "管理员姓名"
        phone:
          type: string
          example: "13800138000"
          description: "手机号"
        email:
          type: string
          example: "admin@example.com"
          description: "邮箱"
      required:
        - id
        - account
        - name

    # 管理员管理相关模型
    CreateAdminRequest:
      type: object
      properties:
        account:
          type: string
          minLength: 3
          maxLength: 50
          example: "admin001"
          description: "管理员账号"
        password:
          type: string
          minLength: 6
          maxLength: 100
          example: "123456"
          description: "密码"
        name:
          type: string
          minLength: 1
          maxLength: 50
          example: "张三"
          description: "管理员姓名"
        phone:
          type: string
          pattern: "^[0-9]{11}$"
          example: "13800138000"
          description: "手机号（11位数字）"
        email:
          type: string
          format: email
          maxLength: 100
          example: "admin@example.com"
          description: "邮箱"
      required:
        - account
        - password
        - name

    UpdateAdminRequest:
      type: object
      properties:
        account:
          type: string
          minLength: 3
          maxLength: 50
          example: "admin001"
          description: "管理员账号"
        password:
          type: string
          minLength: 6
          maxLength: 100
          example: "123456"
          description: "密码（可选，不填则不更新）"
        name:
          type: string
          minLength: 1
          maxLength: 50
          example: "张三"
          description: "管理员姓名"
        phone:
          type: string
          pattern: "^[0-9]{11}$"
          example: "13800138000"
          description: "手机号（11位数字）"
        email:
          type: string
          format: email
          maxLength: 100
          example: "admin@example.com"
          description: "邮箱"
      required:
        - account
        - name

    AdminListResponse:
      type: object
      properties:
        total:
          type: integer
          example: 100
          description: "总记录数"
        page:
          type: integer
          example: 1
          description: "当前页码"
        size:
          type: integer
          example: 10
          description: "每页数量"
        data:
          type: array
          items:
            $ref: "#/components/schemas/AdminInfo"
          description: "管理员列表"
      required:
        - total
        - page
        - size
        - data

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT认证，格式：Bearer {token}"

tags:
  - name: 学生管理
    description: 学生信息的增删改查操作
  - name: 老师管理
    description: 老师信息的增删改查操作
  - name: 成绩管理
    description: 成绩信息的增删改查操作
  - name: 认证
    description: 用户认证相关接口
  - name: 管理员管理
    description: 管理员账号的增删改查操作
  - name: 系统
    description: 系统相关接口
